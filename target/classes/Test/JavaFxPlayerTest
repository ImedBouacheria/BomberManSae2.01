import Etat.Direction;
import Etat.GameMode;
import Etat.PowerUpType;
import javafx.scene.input.KeyCode;
import javafx.scene.paint.Color;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class JavaFXPlayerTest {

    private JavaFXPlayer player;
    private final String PLAYER_NAME = "TestPlayer";
    private final Color PLAYER_COLOR = Color.BLUE;

    @BeforeEach
    void setUp() {
        player = new JavaFXPlayer(PLAYER_NAME, PLAYER_COLOR);
        player.setKeys(KeyCode.Z, KeyCode.S, KeyCode.Q, KeyCode.D, KeyCode.SPACE);
        player.setSpawnPosition(1, 1);
        player.setGridPosition(1, 1);
    }

    @Test
    void testInitialization() {
        assertEquals(PLAYER_NAME, player.getName());
        assertEquals(PLAYER_COLOR, player.getColor());
        assertTrue(player.isAlive());
        assertEquals(3, player.getLives());
        assertEquals(10, player.getBombInventory());
        assertEquals(2, player.getBombPower());
        assertEquals(1, player.getSpeed());
        assertEquals(0, player.getScore());
        assertEquals(GameMode.LIMITED_BOMBS, player.getGameMode());
        assertEquals(1, player.getGridX());
        assertEquals(1, player.getGridY());
        assertEquals(Direction.DOWN, player.getCurrentDirection());
        assertFalse(player.isMoving());
    }

    @Test
    void testMovement() {
        player.move(Direction.UP);
        assertEquals(Direction.UP, player.getCurrentDirection());
        assertTrue(player.isMoving());

        player.stopMoving();
        assertFalse(player.isMoving());
    }

    @Test
    void testBombManagement() {
        // Test en mode bombes limitées
        assertTrue(player.canPlaceBomb());
        player.placeBomb();
        assertEquals(9, player.getBombInventory());
        
        // Test quand l'inventaire est vide
        player.setBombInventory(0);
        assertFalse(player.canPlaceBomb());
        
        // Test en mode bombes infinies
        player.setGameMode(GameMode.INFINITE_BOMBS);
        assertTrue(player.canPlaceBomb());
        player.placeBomb(); // Ne devrait pas diminuer l'inventaire
        assertEquals(0, player.getBombInventory()); // Reste à 0 en mode infini
    }

    @Test
    void testPowerUps() {
        // Test bomb power
        player.increaseBombPower();
        assertEquals(3, player.getBombPower());
        
        // Test speed
        player.increaseSpeed();
        assertEquals(2, player.getSpeed());
        
        // Test heal
        player.setLives(1);
        player.heal();
        assertEquals(2, player.getLives());
        
        // Test add bombs
        player.setBombInventory(5);
        player.addBombs(3);
        assertEquals(8, player.getBombInventory());
    }

    @Test
    void testDamageAndDeath() {
        player.takeDamage();
        assertEquals(2, player.getLives());
        assertTrue(player.isAlive());
        
        player.setLives(1);
        player.takeDamage();
        assertEquals(0, player.getLives());
        assertFalse(player.isAlive());
    }

    @Test
    void testScore() {
        player.addScore(100);
        assertEquals(100, player.getScore());
        
        player.addScore(50);
        assertEquals(150, player.getScore());
    }

    @Test
    void testReset() {
        // Modifier l'état du joueur
        player.setLives(1);
        player.setBombInventory(0);
        player.setBombPower(5);
        player.setSpeed(3);
        player.setScore(500);
        player.setAlive(false);
        
        // Réinitialiser
        player.reset();
        
        // Vérifier les valeurs par défaut
        assertTrue(player.isAlive());
        assertEquals(3, player.getLives());
        assertEquals(10, player.getBombInventory()); // Valeur par défaut pour le mode limité
        assertEquals(2, player.getBombPower());
        assertEquals(1, player.getSpeed());
        assertEquals(0, player.getScore());
        assertEquals(1, player.getGridX()); // Position de spawn
        assertEquals(1, player.getGridY());
    }

    @Test
    void testPositionMethods() {
        assertTrue(player.isAtPosition(1, 1));
        assertFalse(player.isAtPosition(2, 2));
        
        assertTrue(player.isAtSpawn());
        
        player.setGridPosition(3, 4);
        assertEquals(2.23, player.distanceTo(1, 2), 0.01);
    }

    @Test
    void testCanReceivePowerUp() {
        // Test vie
        assertTrue(player.canReceivePowerUp(PowerUpType.LIFE));
        player.setLives(9);
        assertFalse(player.canReceivePowerUp(PowerUpType.LIFE));
        
        // Test puissance bombe
        assertTrue(player.canReceivePowerUp(PowerUpType.BOMB_POWER));
        player.setBombPower(8);
        assertFalse(player.canReceivePowerUp(PowerUpType.BOMB_POWER));
        
        // Test vitesse
        assertTrue(player.canReceivePowerUp(PowerUpType.SPEED));
        player.setSpeed(5);
        assertFalse(player.canReceivePowerUp(PowerUpType.SPEED));
        
        // Test nombre de bombes
        assertTrue(player.canReceivePowerUp(PowerUpType.BOMB_COUNT));
        player.setBombInventory(15);
        assertFalse(player.canReceivePowerUp(PowerUpType.BOMB_COUNT));
        
        // Joueur mort ne peut rien recevoir
        player.setAlive(false);
        assertFalse(player.canReceivePowerUp(PowerUpType.LIFE));
    }

    @Test
    void testApplyPowerUp() {
        int initialScore = player.getScore();
        
        // Appliquer un power-up valide
        player.applyPowerUp(PowerUpType.SPEED);
        assertEquals(2, player.getSpeed());
        assertEquals(initialScore + 100, player.getScore());
        
        // Appliquer un power-up au maximum (ne devrait rien faire)
        player.setSpeed(5);
        initialScore = player.getScore();
        player.applyPowerUp(PowerUpType.SPEED);
        assertEquals(5, player.getSpeed()); // Pas de changement
        assertEquals(initialScore, player.getScore()); // Pas de points ajoutés
    }

    @Test
    void testGameModeChanges() {
        // Passage en mode infini
        player.setGameMode(GameMode.INFINITE_BOMBS);
        assertEquals(GameMode.INFINITE_BOMBS, player.getGameMode());
        assertEquals("∞", player.getBombInventoryDisplay());
        
        // Retour en mode limité
        player.setGameMode(GameMode.LIMITED_BOMBS);
        assertEquals(GameMode.LIMITED_BOMBS, player.getGameMode());
        assertEquals("10", player.getBombInventoryDisplay()); // Doit réinitialiser l'inventaire
    }

    @Test
    void testVisualRepresentation() {
        // Test simple pour vérifier que la méthode ne lance pas d'exception
        assertDoesNotThrow(() -> player.createVisualRepresentation());
    }

    @Test
    void testToString() {
        String str = player.toString();
        assertTrue(str.contains(PLAYER_NAME));
        assertTrue(str.contains("alive=true"));
        assertTrue(str.contains("position=(1,1)"));
    }
}