package com.example.bombermansae201;

/**
 * √ânum√©ration repr√©sentant les diff√©rents types de power-ups
 * disponibles dans le jeu Bomberman
 */
public enum PowerUpType {
    BOMB_COUNT(
            "üí£ Bombes +1",
            "Augmente le nombre de bombes disponibles",
            "üí£",
            100
    ),
    BOMB_POWER(
            "üí• Puissance +1",
            "Augmente la puissance d'explosion des bombes",
            "üí•",
            150
    ),
    SPEED(
            "‚ö° Vitesse +1",
            "Augmente la vitesse de d√©placement du joueur",
            "‚ö°",
            120
    ),
    LIFE(
            "‚ù§Ô∏è Vie +1",
            "Ajoute une vie suppl√©mentaire au joueur",
            "‚ù§Ô∏è",
            200
    );

    private final String displayName;
    private final String description;
    private final String emoji;
    private final int scoreValue;

    /**
     * Constructeur de l'√©num√©ration
     * @param displayName Nom affich√© du power-up
     * @param description Description de l'effet
     * @param emoji √âmoji repr√©sentant le power-up
     * @param scoreValue Points accord√©s lors de la collecte
     */
    PowerUpType(String displayName, String description, String emoji, int scoreValue) {
        this.displayName = displayName;
        this.description = description;
        this.emoji = emoji;
        this.scoreValue = scoreValue;
    }

    /**
     * Retourne le nom d'affichage du power-up
     * @return Le nom d'affichage
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Retourne la description de l'effet
     * @return La description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Retourne l'√©moji du power-up
     * @return L'√©moji
     */
    public String getEmoji() {
        return emoji;
    }

    /**
     * Retourne la valeur en points du power-up
     * @return La valeur en points
     */
    public int getScoreValue() {
        return scoreValue;
    }

    /**
     * Retourne le nom complet avec √©moji
     * @return Nom complet avec √©moji
     */
    public String getFullDisplayName() {
        return emoji + " " + displayName;
    }

    /**
     * Retourne la couleur associ√©e au power-up (pour l'interface)
     * @return Code couleur hexad√©cimal
     */
    public String getColorCode() {
        switch (this) {
            case BOMB_COUNT: return "#FF8800"; // Orange
            case BOMB_POWER: return "#FF0000"; // Rouge
            case SPEED: return "#00FFFF"; // Cyan
            case LIFE: return "#FF69B4"; // Rose
            default: return "#FFFFFF"; // Blanc par d√©faut
        }
    }

    /**
     * Retourne la raret√© du power-up
     * @return Niveau de raret√© (1=commun, 5=tr√®s rare)
     */
    public int getRarity() {
        switch (this) {
            case BOMB_COUNT: return 2; // Assez commun
            case BOMB_POWER: return 3; // Moyen
            case SPEED: return 3; // Moyen
            case LIFE: return 5; // Tr√®s rare
            default: return 1;
        }
    }

    /**
     * Retourne la probabilit√© d'apparition du power-up
     * @return Probabilit√© entre 0.0 et 1.0
     */
    public double getSpawnProbability() {
        switch (this) {
            case BOMB_COUNT: return 0.4; // 40%
            case BOMB_POWER: return 0.3; // 30%
            case SPEED: return 0.2; // 20%
            case LIFE: return 0.1; // 10%
            default: return 0.1;
        }
    }

    /**
     * V√©rifie si le power-up affecte les bombes
     * @return true si le power-up concerne les bombes
     */
    public boolean isBombRelated() {
        return this == BOMB_COUNT || this == BOMB_POWER;
    }

    /**
     * V√©rifie si le power-up affecte le mouvement
     * @return true si le power-up concerne le mouvement
     */
    public boolean isMovementRelated() {
        return this == SPEED;
    }

    /**
     * V√©rifie si le power-up affecte la survie
     * @return true si le power-up concerne la survie
     */
    public boolean isSurvivalRelated() {
        return this == LIFE;
    }

    /**
     * Retourne tous les power-ups disponibles
     * @return Tableau de tous les power-ups
     */
    public static PowerUpType[] getAllPowerUps() {
        return values();
    }

    /**
     * Retourne un power-up al√©atoire selon les probabilit√©s
     * @return Un power-up choisi al√©atoirement
     */
    public static PowerUpType getRandomPowerUp() {
        double random = Math.random();
        double cumulative = 0.0;

        for (PowerUpType type : values()) {
            cumulative += type.getSpawnProbability();
            if (random <= cumulative) {
                return type;
            }
        }

        return BOMB_COUNT; // Fallback
    }

    /**
     * Retourne un power-up al√©atoire avec probabilit√©s √©gales
     * @return Un power-up choisi al√©atoirement
     */
    public static PowerUpType getRandomPowerUpUniform() {
        PowerUpType[] types = values();
        return types[(int) (Math.random() * types.length)];
    }

    /**
     * Trouve un power-up par son nom d'affichage
     * @param displayName Le nom d'affichage √† rechercher
     * @return Le power-up correspondant ou null si non trouv√©
     */
    public static PowerUpType fromDisplayName(String displayName) {
        for (PowerUpType type : values()) {
            if (type.getDisplayName().equalsIgnoreCase(displayName)) {
                return type;
            }
        }
        return null;
    }

    /**
     * Retourne une repr√©sentation textuelle du power-up
     * @return Repr√©sentation textuelle
     */
    @Override
    public String toString() {
        return String.format("PowerUpType{name='%s', emoji='%s', score=%d, rarity=%d}",
                displayName, emoji, scoreValue, getRarity());
    }

    /**
     * Retourne une description compl√®te du power-up
     * @return Description compl√®te
     */
    public String getFullDescription() {
        return String.format("%s\n%s\nüèÜ Points: %d\n‚≠ê Raret√©: %d/5",
                getFullDisplayName(), description, scoreValue, getRarity());
    }
}